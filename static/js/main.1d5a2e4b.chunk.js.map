{"version":3,"sources":["contents/Home.js","contents/MenuTabs.js","contents/Skills.js","contents/Pages.js","serviceWorker.js","index.js"],"names":["Home","Jumbotron","MenuTabs","Navbar","bg","sticky","variant","to","Brand","Toggle","aria-controls","Collapse","id","Nav","activeKey","className","Link","Skills","props","json","require","skills","key","push","type","skill","sentence","state","CardColumns","this","React","Component","Skill","Card","style","width","Header","Body","Title","Text","home","Boolean","window","location","hostname","match","ReactDOM","render","padding","Container","atEnter","opacity","atLeave","val","spring","stiffness","damping","atActive","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ikDAGe,SAASA,IACtB,OACE,kBAACC,EAAA,EAAD,KACE,kEACA,yF,4BCFS,SAASC,IACtB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,MAAMC,QAAQ,QACrC,kBAAC,gBAAD,CAAeC,GAAG,KAChB,kBAACJ,EAAA,EAAOK,MAAR,cAEF,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,IAAIC,UAAU,WAC3B,kBAAC,gBAAD,CAAeR,GAAG,KAChB,kBAACM,EAAA,EAAIG,KAAL,cAEF,kBAAC,gBAAD,CAAeT,GAAG,WAChB,kBAACM,EAAA,EAAIG,KAAL,mB,kECbSC,E,YACnB,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IACN,IAAIC,EAAOC,EAAQ,IACbC,EAAS,GACf,IAAK,IAAIC,KAAOH,EAAI,OAClBE,EAAOE,KACL,kBAAC,EAAD,CACED,IAAKA,EACLE,KAAML,EAAI,OAAWG,GAAf,KACNG,MAAON,EAAI,OAAWG,GAAf,MACPI,SAAUP,EAAI,OAAWG,GAAf,YAVC,OAcjB,EAAKK,MAAQ,CAAEN,OAAQA,GAdN,E,sEAkBjB,OAAO,kBAACO,EAAA,EAAD,KAAcC,KAAKF,MAAMN,Y,GAnBAS,IAAMC,WAuBpCC,EAAQ,SAACd,GACb,OACE,kBAACe,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,OAAN,KAAclB,EAAMM,MACpB,kBAACS,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KAAapB,EAAMO,OACnB,kBAACQ,EAAA,EAAKM,KAAN,KAAYrB,EAAMQ,aCzBpBc,EAAO,kBAAM,kBAACxC,EAAD,OACbqB,EAAS,kBAAM,kBAAC,EAAD,O,MCEDoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,0BAAMb,MANA,CACJc,QAAS,cAOT,mBFIW,WACb,OACE,kBAAC,gBAAD,KACE,kBAAC9C,EAAD,MACA,kBAAC+C,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,SAdLE,EAcqB,EAb5BC,YAAOD,EAAK,CACjBE,UAAW,IACXC,QAAS,OAYHC,SAAU,CAAEN,QAAS,GACrBpC,UAAU,kBAEV,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,UAAUC,UAAWvC,OAnBjD,IAAgBgC,IEGZ,OAEFQ,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1d5a2e4b.chunk.js","sourcesContent":["import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nexport default function Home() {\n  return (\n    <Jumbotron>\n      <h1>Welcome to marusan03's Portfolio!!</h1>\n      <p>React+bootstrapで作りました！</p>\n    </Jumbotron>\n  );\n}\n","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nexport default function MenuTabs() {\n  return (\n    <Navbar bg=\"dark\" sticky=\"Top\" variant=\"dark\">\n      <LinkContainer to=\"/\">\n        <Navbar.Brand>Menu</Navbar.Brand>\n      </LinkContainer>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav activeKey=\"/\" className=\"mr-auto\">\n          <LinkContainer to=\"/\">\n            <Nav.Link>Home</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/Skills\">\n            <Nav.Link>Skills</Nav.Link>\n          </LinkContainer>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardColumns from 'react-bootstrap/CardColumns';\n\nexport default class Skills extends React.Component {\n  constructor(props) {\n    super(props);\n    var json = require('./data/skills.json');\n    const skills = [];\n    for (var key in json['skills']) {\n      skills.push(\n        <Skill\n          key={key}\n          type={json['skills'][key]['type']}\n          skill={json['skills'][key]['skill']}\n          sentence={json['skills'][key]['sentence']}\n        />\n      );\n    }\n    this.state = { skills: skills };\n  }\n\n  render() {\n    return <CardColumns>{this.state.skills}</CardColumns>;\n  }\n}\n\nconst Skill = (props) => {\n  return (\n    <Card style={{ width: '18rem' }}>\n      <Card.Header>{props.type}</Card.Header>\n      <Card.Body>\n        <Card.Title>{props.skill}</Card.Title>\n        <Card.Text>{props.sentence}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\nSkill.propTypes = {\n  type: PropTypes.string.isRequired,\n  skill: PropTypes.string.isRequired,\n  sentence: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { AnimatedSwitch, spring } from 'react-router-transition';\nimport Home from './Home';\nimport MenuTabs from './MenuTabs';\nimport './pages.css';\nimport Skills from './Skills';\n\nconst home = () => <Home />;\nconst skills = () => <Skills />;\n\nfunction bounce(val) {\n  return spring(val, {\n    stiffness: 330,\n    damping: 22,\n  });\n}\n\nexport default function Pages() {\n  return (\n    <BrowserRouter>\n      <MenuTabs />\n      <Container>\n        <AnimatedSwitch\n          atEnter={{ opacity: 0 }}\n          atLeave={{ opacity: bounce(1) }}\n          atActive={{ opacity: 1 }}\n          className=\"switch-wrapper\"\n        >\n          <Route exact path=\"/\" component={home} />\n          <Route exact path=\"/skills\" component={skills} />\n        </AnimatedSwitch>\n      </Container>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pages from './contents/Pages';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst useStyles = {\n  main: {\n    padding: '10px 10px',\n  },\n};\n\nReactDOM.render(\n  <main style={useStyles.main}>\n    {/* <Intro /> */}\n    <Pages />\n  </main>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}